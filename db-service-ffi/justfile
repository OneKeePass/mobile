alias ba := build-android-lib
alias gk := generate-kotlin
alias bca := cp-android-ffi-lib-src
# Use bca-d for development time - See below for target use

alias gs := generate-swift
alias bcis := cp-ios-ffi-sim-debug-lib-src
alias bcid := cp-ios-ffi-device-debug-lib-src
alias bcid-r := cp-ios-ffi-device-release-lib-src

udl_src := "./src/db_service.udl"
swift-src-dir := "./target/swift"
kotlin-src-dir := "./target/kotlin"

ios-db-service-ffi-dir  := "../ios/OneKeePassMobile/DbServiceFFI"
ios-db-service-ffi-lib-dir  := "../ios/OneKeePassMobile/DbServiceFFILib"
ios-lib-output := "target/libdb_service_ffi.a"

##################  In case we want to use prebuilt ios botan static lib ##############
 
## After downloading the botan source
## ./configure.py --os=ios --prefix="iphone-64" --cpu=armv8-a --cc=clang --cc-abi-flags="-arch arm64"
## xcrun --sdk iphoneos make install
ios-botan-lib := "botan-build/ios-64/libbotan-3.a"

## ./configure.py --os=ios --prefix="iphone-64-sim" --cpu=arm64 --cc=clang --cc-abi-flags="-arch arm64"
## xcrun --sdk iphonesimulator make install
ios-sim-botan-lib := "botan-build/ios-64-sim/libbotan-3.a"


## These static lib should be copied to 'ios/OneKeePassMobile/DbServiceFFILib'

###############################################################


## cargo install uniffi_bindgen 
## installed already and version 0.20.0 should match that is used in Cargo.toml)

## Need to do this one time
## cd ./uniffi-bindgen
## cargo build --release  
## Now on we can use the appropriate version of uniffi-bindgen

generate-rs:
    ../uniffi-bindgen/target/release/uniffi-bindgen scaffolding {{udl_src}} -o ./target/  --no-format
    #cargo run --features=uniffi/cli --bin uniffi-bindgen scaffolding {{udl_src}} -o ./target/  --no-format
    #uniffi-bindgen scaffolding {{udl_src}} --no-format --out-dir ./target/

generate-swift:
    mkdir  -p {{swift-src-dir}}
    ../uniffi-bindgen/target/release/uniffi-bindgen generate -l swift {{udl_src}} --out-dir {{swift-src-dir}}

build-ios-device-lib-release:
    cargo build --target aarch64-apple-ios --release

build-ios-sim-lib-release:
    cargo build --target aarch64-apple-ios-sim --release

build-ios-sim-lib-debug:
    cargo build --target aarch64-apple-ios-sim 

build-ios-device-lib-debug:
    cargo build --target aarch64-apple-ios 

## Call 'just bcis'
cp-ios-ffi-sim-debug-lib-src: build-ios-sim-lib-debug generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp target/aarch64-apple-ios-sim/debug/libdb_service_ffi.a {{ios-db-service-ffi-lib-dir}} 
    #cp {{ios-sim-botan-lib}} {{ios-db-service-ffi-lib-dir}}  

## Builds the debug ios static lib for device and copies that lib file and the swift bindings generated 
## Used during dev time device testing
## Call 'just bcid'
cp-ios-ffi-device-debug-lib-src: build-ios-device-lib-debug generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp target/aarch64-apple-ios/debug/libdb_service_ffi.a {{ios-db-service-ffi-lib-dir}} 
    #cp {{ios-botan-lib}} {{ios-db-service-ffi-lib-dir}}

## Builds the release ios static lib for device and copies that lib file and the swift bindings generated
## Call 'just bcid-r'
cp-ios-ffi-device-release-lib-src:build-ios-device-lib-release generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp target/aarch64-apple-ios/release/libdb_service_ffi.a {{ios-db-service-ffi-lib-dir}} 

###############################   Android related ############################### 

## cargo build --target aarch64-linux-android did not work and cargo-ndk works nice
## Needs to do one time 'cargo install cargo-ndk' and use that instead of cargo build directly for this target
## See https://github.com/bbqsrc/cargo-ndk
## 'cargo ndk --version' prints 'cargo-ndk 2.12.6'
## ANDROID_NDK_HOME environment variable should be set to the same version of NDK version used in 
## ".... android/build.gradle" 

build-android-lib release="" :
    #cargo build --target aarch64-linux-android
    cargo ndk \
    -t aarch64-linux-android \
    -t armv7-linux-androideabi \
    -t x86_64-linux-android \
    -t i686-linux-android  -o ./target/jniLibs build {{ if release == "true" {"--release" } else {""}  }}

generate-kotlin:
    mkdir  -p {{kotlin-src-dir}}
    ../uniffi-bindgen/target/release/uniffi-bindgen generate -l kotlin {{udl_src}} --out-dir {{kotlin-src-dir}}

android-db-service-src-dir  := "../android/app/src/main/java"
android-db-service-lib-dir  := "../android/app/src/main"
android-lib-output-dir := "target/jniLibs"

## For release build, call 'just bca true '
cp-android-ffi-lib-src release="": (build-android-lib release) generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}} 


######## 

## Do not build x86_64-linux-android and i686-linux-android during dev to speed things up
# alias bca-d := cp-android-ffi-lib-src-d

build-android-lib-d:
    cargo ndk -t aarch64-linux-android -t armv7-linux-androideabi -o ./target/jniLibs build

cp-android-ffi-lib-src-d:build-android-lib-d generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}}

######################################## Botan lib  ########################################

ndk_botan_build_home := env_var('ANDROID_NDK_HOME') + "/../26.1.10909125"
ndk_ar := ndk_botan_build_home + "/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ar"
ndk_cxx := ndk_botan_build_home + "/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android31-clang++"

## Need to ensure to use 'crate-type = ["lib", "staticlib","cdylib"]' in Cargo.toml
build-android-lib-aarch64 release="":
    #!/usr/bin/env bash
    set -euxo pipefail
    export BOTAN_CONFIGURE_OS='android'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch arm64'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='arm64'
    export BOTAN_CONFIGURE_DISABLE_MODULES='tls,pkcs11,sodium,filters'
    export AR={{ndk_ar}}
    export CXX={{ndk_cxx}}

    cargo ndk -t aarch64-linux-android   -o ./target/jniLibs build {{ if release == "true" {"--release" } else {""}  }}

build-android-lib-all release="":
    just build-android-lib-aarch64 release
    cargo ndk -t armv7-linux-androideabi  -o ./target/jniLibs build {{ if release == "true" {"--release" } else {""}  }}

## Dev time used 
## Call 'bca-d'
build-android-lib-cp-src release="":(build-android-lib-all release) generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}}

alias bca-d := build-android-lib-cp-src

########################  botan lib build experiment ###############

## io-sim-sdk-root := `xcrun --sdk iphonesimulator  --show-sdk-path`


# my_sd := "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk" 

# ios_sim_sdk_root := "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk" 

ios_sim_sdk_root := `xcrun --sdk iphonesimulator  --show-sdk-path`
## This works 
build-ios-sim-lib-debug-1:
    #!/usr/bin/env bash
    set -euxo pipefail
    #export SDKROOT="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk"
    export SDKROOT={{ios_sim_sdk_root}}
    export BOTAN_CONFIGURE_OS='ios'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch arm64'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='arm64'
    
    cargo build --target aarch64-apple-ios-sim

ios_sdk_root := `xcrun --sdk iphoneos --show-sdk-path`
build-ios-device-lib-debug-1:
    #!/usr/bin/env bash
    set -euxo pipefail
    #export SDKROOT="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk"
    export SDKROOT={{ios_sdk_root}}
    export BOTAN_CONFIGURE_OS='ios'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch arm64'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='armv8-a'
    #cargo build --target aarch64-apple-ios

build-ios-sim-lib-debug-2:
    #!/usr/bin/env bash
    set -euxo pipefail
    export BOTAN_CONFIGURE_OS='ios'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch x86_64'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='x86_64'
    cargo build --target x86_64-apple-ios


##ios-aarch64-env = --config "env.BOTAN_CONFIGURE_OS='ios'" --config  "env.BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch arm64'" 

## 
build-test1:
    #!/usr/bin/env bash
    set -euxo pipefail
    export BOTAN_CONFIGURE_OS='ios'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch arm64'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='arm64'
    export BOTAN_CONFIGURE_MINIMIZED_BUILD="yes"
    cargo build --target aarch64-apple-ios


## export CXX="/Users/jeyasankar/Library/Android/sdk/ndk/26.1.10909125/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android31-clang++"


build-android-1:
    #!/usr/bin/env bash
    set -euxo pipefail
    export BOTAN_CONFIGURE_OS='android'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch arm64'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='arm64'
    export AR="/Users/jeyasankar/Library/Android/sdk/ndk/26.1.10909125/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ar"
    export CXX="/Users/jeyasankar/Library/Android/sdk/ndk/26.1.10909125/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android31-clang++"
   
    #cargo ndk -t aarch64-linux-android -t armv7-linux-androideabi  -o ./target/jniLibs build
    cargo ndk -t aarch64-linux-android   -o ./target/jniLibs build


build-android-3:
    #!/usr/bin/env bash
    set -euxo pipefail
    export BOTAN_CONFIGURE_OS='android'
    export BOTAN_CONFIGURE_CC_ABI_FLAGS='-arch armv7'
    export BOTAN_CONFIGURE_CC='clang'
    export BOTAN_CONFIGURE_CPU='armv7'
    export AR="/Users/jeyasankar/Library/Android/sdk/ndk/26.1.10909125/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-ar"
    export CXX="/Users/jeyasankar/Library/Android/sdk/ndk/26.1.10909125/toolchains/llvm/prebuilt/darwin-x86_64/bin/aarch64-linux-android31-clang++"
   
    cargo ndk -t aarch64-linux-android  -o ./target/jniLibs build
    #cargo ndk -t aarch64-linux-android -t armv7-linux-androideabi  -o ./target/jniLibs build
    #cargo ndk -t armv7-linux-androideabi   -o ./target/jniLibs build


build-test-android-2:build-android-1 generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}}


build-test-android-3:generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}}
