alias ba := build-android-lib
alias gk := generate-kotlin
alias bca := cp-android-ffi-lib-src

alias gs := generate-swift
alias bcis := cp-ios-ffi-fat-sim-debug-lib-src
alias bcid := cp-ios-ffi-device-debug-lib-src
alias bcid-r := cp-ios-ffi-device-release-lib-src

udl_src := "./src/db_service.udl"
swift-src-dir := "./target/swift"
kotlin-src-dir := "./target/kotlin"

ios-db-service-ffi-dir  := "../ios/OneKeePassMobile/DbServiceFFI"
ios-db-service-ffi-lib-dir  := "../ios/OneKeePassMobile/DbServiceFFILib"
ios-lib-output := "target/libdb_service_ffi.a"

## cargo install uniffi_bindgen 
## installed already and version 0.20.0 should match that is used in Cargo.toml)
generate-rs:
    uniffi-bindgen scaffolding {{udl_src}} --no-format --out-dir ./target/

generate-swift:
    mkdir  -p {{swift-src-dir}}
    uniffi-bindgen generate -l swift {{udl_src}} --out-dir {{swift-src-dir}}

build-ios-device-lib-release:
    cargo build --target aarch64-apple-ios --release

build-ios-sim-lib-release:
    cargo build --target x86_64-apple-ios --release
    cargo build --target aarch64-apple-ios-sim --release

build-ios-sim-lib-debug:
    cargo build --target x86_64-apple-ios 
    cargo build --target aarch64-apple-ios-sim 

build-ios-device-lib-debug:
    cargo build --target aarch64-apple-ios 

## Builds the release ios fat static lib for simulator
ios-fat-lib-sim-release: build-ios-sim-lib-release
    lipo -create target/aarch64-apple-ios-sim/release/libdb_service_ffi.a \
                 target/x86_64-apple-ios/release/libdb_service_ffi.a \
                 -output {{ios-lib-output}}

## Builds the debug ios fat static lib for simulator
ios-fat-lib-sim-debug: build-ios-sim-lib-debug
    lipo -create target/aarch64-apple-ios-sim/debug/libdb_service_ffi.a \
                 target/x86_64-apple-ios/debug/libdb_service_ffi.a \
                 -output {{ios-lib-output}}


## Builds the release ios static lib for simulator and copies that lib file and the swift bindings generated
cp-ios-ffi-fat-sim-release-lib-src: ios-fat-lib-sim-release generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp {{ios-lib-output}} {{ios-db-service-ffi-lib-dir}}

## Builds the debug ios static lib for simulator and copies that lib file and the swift bindings generated
cp-ios-ffi-fat-sim-debug-lib-src: ios-fat-lib-sim-debug generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp {{ios-lib-output}} {{ios-db-service-ffi-lib-dir}} 

## Builds the debug ios static lib for device and copies that lib file and the swift bindings generated 
cp-ios-ffi-device-debug-lib-src: build-ios-device-lib-debug generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp target/aarch64-apple-ios/debug/libdb_service_ffi.a {{ios-db-service-ffi-lib-dir}} 

## Builds the release ios static lib for device and copies that lib file and the swift bindings generated
## Call 'just bcid-r'
cp-ios-ffi-device-release-lib-src:build-ios-device-lib-release generate-swift
    cp -R {{swift-src-dir}}/ {{ios-db-service-ffi-dir}}
    cp target/aarch64-apple-ios/release/libdb_service_ffi.a {{ios-db-service-ffi-lib-dir}} 

### Android related

## cargo build --target aarch64-linux-android did not work and cargo-ndk works nice
## Needs to do one time 'cargo install cargo-ndk' and use that instead of cargo build directly for this target
## See https://github.com/bbqsrc/cargo-ndk
## 'cargo ndk --version' prints 'cargo-ndk 2.12.6'
## ANDROID_NDK_HOME environment variable should be set to the same version of NDK version used in 
## ".... android/build.gradle" 

build-android-lib release="" :
    #cargo build --target aarch64-linux-android
    cargo ndk \
    -t aarch64-linux-android \
    -t armv7-linux-androideabi \
    -t x86_64-linux-android \
    -t i686-linux-android  -o ./target/jniLibs build {{ if release == "true" {"--release" } else {""}  }}

generate-kotlin:
    mkdir  -p {{kotlin-src-dir}}
    uniffi-bindgen generate -l kotlin {{udl_src}} --out-dir {{kotlin-src-dir}}

android-db-service-src-dir  := "../android/app/src/main/java"
android-db-service-lib-dir  := "../android/app/src/main"
android-lib-output-dir := "target/jniLibs"

## For release build, call 'just bca true '
cp-android-ffi-lib-src release="": (build-android-lib release) generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}} 


######## 
alias bca-d := cp-android-ffi-lib-src-d

build-android-lib-d:
    cargo ndk -t aarch64-linux-android -t armv7-linux-androideabi -o ./target/jniLibs build

cp-android-ffi-lib-src-d:build-android-lib-d generate-kotlin
    cp -R {{kotlin-src-dir}}/ {{android-db-service-src-dir}}
    cp -R {{android-lib-output-dir}} {{android-db-service-lib-dir}}