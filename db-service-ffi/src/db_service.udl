namespace db_service {
    
    // Called one time 
    void db_service_enable_logging();

    // Needs to be called from Swift/Kotlin side to initialize callback that can be used from rust side
    // This fn is now in udl_uniffi_exports.rs and uses export attribute
    // void db_service_initialize(CommonDeviceService common_device_service,SecureKeyOperation secure_key_operation,EventDispatch event_dispatcher);
 
    ApiResponse read_kdbx(FileArgs file_args, string json_args);
    ApiResponse create_temp_kdbx(FileArgs file_args, string json_args);
    ApiResponse save_kdbx(FileArgs file_args, boolean overwrite);
    ApiResponse verify_db_file_checksum(FileArgs file_args);
    ApiResponse write_to_backup_on_error(string full_file_name_uri);

    string copy_picked_key_file(FileArgs file_args);

    // The arg 'json_args' is '[ByRef] string' and that  ensures we can use &str instead of String in args
    string upload_attachment(FileArgs file_args,[ByRef] string json_args);

    string extract_file_provider(string full_file_name_uri);
    string invoke_command(string command_name, string args);
};

// New way of using callback
// The rust side may be implemented and which can then be used in Swift or in Kotlin side 
// The 'WithForeign' attribute indicates, there is also an implementaion in Swift/Kotlin 
// If this is implemented in Swift/Kotlin, then that is a callback for the rust side to use 
// Swift/Kotlin implementaion is passed as 'Arc<dyn EventDispatch>'
[Trait,WithForeign]
interface EventDispatch {
    [Throws=ApiCallbackError]
    void send_otp_update(string json_string);

    [Throws=ApiCallbackError]
    void send_tick_update(string json_string);
};

// Also see the callback CommonDeviceServiceEx definition using macros in "udl_callbacks.rs"
// From Rust to Swift or Kotlin
callback interface CommonDeviceService {
    string app_home_dir();
    string? app_group_home_dir(); // iOS specific
    string cache_dir();
    string temp_dir();
    string? load_language_translation(string language_id);
    string? uri_to_file_name(string full_file_name_uri);
    FileInfo? uri_to_file_info(string full_file_name_uri);
};

// From Rust to Swift or Kotlin
callback interface SecureKeyOperation {
    [Throws=SecureKeyOperationError]
    void store_key(string db_key,string enc_key_data);

    [Throws=SecureKeyOperationError]
    string? get_key(string db_key);

    [Throws=SecureKeyOperationError]
    void delete_key(string db_key);
};

// Need to combine this SecureKeyOperationError
// and use that for all callback erors
[Enum]
interface ApiCallbackError {
    InternalCallbackError(string reason);
};

// Used in the callback error of SecureKeyOperation
[Error]
enum SecureKeyOperationError {
    "StoringKeyError",
    "StoringKeyDuplicateItemError",
    "QueryKeyError",
    "DeleteKeyError",
    "InternalSecureKeyOperationError",
};

dictionary FileInfo {
    string? file_name;
    i64? file_size;
    i64? last_modified;
    string? location;
};

dictionary KdbxCreated {
    sequence<u8> buffer;
    string api_response;
};

// TODO: Move the ios platform specific services to ios/support_servicess (to be added)

// iOS specific APIs. Called from Swift to Rust
// All methods need to receive &self as first argument in Rust side implementaion
// See similar service 'IosAppGroupSupportService' in app_group module using uniffi Procedural Macros 
interface IosSupportService {
    constructor();
    boolean save_book_mark_data(string url,sequence<u8> data);
    sequence<u8> load_book_mark_data(string url);
    void delete_book_mark_data([ByRef] string full_file_name_uri);
    string? copy_last_backup_to_temp_file(string kdbx_file_name,string full_file_name_uri);
    string complete_save_as_on_error([ByRef] string json_args);

};

//  Moveed the android platform specific services to AndroidSupportServiceExtra in android/support_servicess 

// Android specific APIs. Called from Kotlin side to Rust
// All methods need to receive &self in Rust side implementaion side except constructor 
// interface AndroidSupportService {
//     constructor();
//     ApiResponse create_kdbx(u64 file_descriptor, string json_args);
//     ApiResponse complete_save_as_on_error(u64 file_descriptor, string old_full_file_name_uri,string new_full_file_name_uri, string file_name);
//     string save_key_file(u64 file_descriptor, string full_key_file_name);
//     // string save_attachment(u64 file_descriptor, string json_args);
// };

// Called from middle layer (Swift or Kotlin side) to form a json string and  return to UI layer
// UI layer deserializes this to a valid json object and used accordingly
// All methods need to receive &self in Rust side implementaion except constructor 
interface JsonService {
    constructor();
    string form_with_file_name(string full_file_name_uri);
    string map_as_ok_json_string(record<DOMString,string> info);
    string ok_json_string(string info);
    string error_json_string(string error);
};

[Enum]
interface FileArgs {
    FileDecriptor(u64 fd);
    FileDecriptorWithFullFileName(u64 fd,string full_file_name,string file_name);
    FullFileName(string full_file_name);
    FileNameWithDir(string dir_path,string file_name);
};

[Enum]
interface ApiResponse {
    Success(string result);
    Failure(string result);
};
