// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package onekeepass.mobile.ffi;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_db_service_ffi_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: Int, len: Int, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity
            buf.len = len
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_db_service_ffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Byte);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "db_service_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "db_service")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                uniffiCallbackInterfaceEventDispatch.register(lib)
                uniffiCallbackInterfaceCommonDeviceService.register(lib)
                uniffiCallbackInterfaceSecureKeyOperation.register(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_db_service_ffi_fn_clone_androidsupportservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_androidsupportservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_constructor_androidsupportservice_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_method_androidsupportservice_complete_save_as_on_error(`ptr`: Pointer,`fileDescriptor`: Long,`oldFullFileNameUri`: RustBuffer.ByValue,`newFullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_androidsupportservice_create_kdbx(`ptr`: Pointer,`fileDescriptor`: Long,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_androidsupportservice_save_key_file(`ptr`: Pointer,`fileDescriptor`: Long,`fullKeyFileName`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_clone_eventdispatch(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_eventdispatch(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_eventdispatch(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_db_service_ffi_fn_method_eventdispatch_send_otp_update(`ptr`: Pointer,`jsonString`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_method_eventdispatch_send_tick_update(`ptr`: Pointer,`jsonString`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_clone_iossupportservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_iossupportservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_constructor_iossupportservice_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_method_iossupportservice_all_entries_on_db_open(`ptr`: Pointer,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_complete_save_as_on_error(`ptr`: Pointer,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_copy_file_to_app_group(`ptr`: Pointer,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_copy_last_backup_to_temp_file(`ptr`: Pointer,`kdbxFileName`: RustBuffer.ByValue,`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_delete_book_mark_data(`ptr`: Pointer,`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_method_iossupportservice_list_app_group_db_files(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_load_book_mark_data(`ptr`: Pointer,`url`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_read_kdbx_from_app_group(`ptr`: Pointer,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_iossupportservice_save_book_mark_data(`ptr`: Pointer,`url`: RustBuffer.ByValue,`data`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_db_service_ffi_fn_clone_jsonservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_jsonservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_constructor_jsonservice_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_method_jsonservice_error_json_string(`ptr`: Pointer,`error`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_jsonservice_form_with_file_name(`ptr`: Pointer,`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_jsonservice_map_as_ok_json_string(`ptr`: Pointer,`info`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_jsonservice_ok_json_string(`ptr`: Pointer,`info`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_init_callback_commondeviceservice(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_securekeyoperation(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_db_service_ffi_fn_func_copy_picked_key_file(`fileArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_create_temp_kdbx(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_db_service_enable_logging(uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_func_db_service_initialize(`commonDeviceService`: Long,`secureKeyOperation`: Long,`eventDispatcher`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_func_extract_file_provider(`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_invoke_command(`commandName`: RustBuffer.ByValue,`args`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_read_kdbx(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_save_kdbx(`fileArgs`: RustBuffer.ByValue,`overwrite`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_upload_attachment(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_verify_db_file_checksum(`fileArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_write_to_backup_on_error(`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rustbuffer_alloc(`size`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_db_service_ffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rust_future_poll_u8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_db_service_ffi_rust_future_poll_i8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_db_service_ffi_rust_future_poll_u16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_db_service_ffi_rust_future_poll_i16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_db_service_ffi_rust_future_poll_u32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_db_service_ffi_rust_future_poll_i32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_db_service_ffi_rust_future_poll_u64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_db_service_ffi_rust_future_poll_i64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_db_service_ffi_rust_future_poll_f32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_f32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_db_service_ffi_rust_future_poll_f64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_f64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_db_service_ffi_rust_future_poll_pointer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_pointer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_db_service_ffi_rust_future_poll_rust_buffer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_rust_buffer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rust_future_poll_void(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_void(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_checksum_func_copy_picked_key_file(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_create_temp_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_db_service_enable_logging(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_db_service_initialize(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_extract_file_provider(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_invoke_command(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_read_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_save_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_upload_attachment(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_verify_db_file_checksum(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_write_to_backup_on_error(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportservice_complete_save_as_on_error(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportservice_create_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportservice_save_key_file(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_eventdispatch_send_otp_update(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_eventdispatch_send_tick_update(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_all_entries_on_db_open(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_complete_save_as_on_error(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_copy_file_to_app_group(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_copy_last_backup_to_temp_file(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_delete_book_mark_data(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_list_app_group_db_files(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_load_book_mark_data(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_read_kdbx_from_app_group(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_iossupportservice_save_book_mark_data(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_error_json_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_form_with_file_name(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_map_as_ok_json_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_ok_json_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_constructor_androidsupportservice_new(
    ): Short
    fun uniffi_db_service_ffi_checksum_constructor_iossupportservice_new(
    ): Short
    fun uniffi_db_service_ffi_checksum_constructor_jsonservice_new(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_app_home_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_app_group_home_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_cache_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_temp_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_load_language_translation(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_name(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_info(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_securekeyoperation_store_key(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_securekeyoperation_get_key(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_securekeyoperation_delete_key(
    ): Short
    fun ffi_db_service_ffi_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_db_service_ffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_db_service_ffi_checksum_func_copy_picked_key_file() != 35177.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_create_temp_kdbx() != 3510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_db_service_enable_logging() != 27628.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_db_service_initialize() != 246.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_extract_file_provider() != 63250.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_invoke_command() != 63733.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_read_kdbx() != 27336.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_save_kdbx() != 47740.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_upload_attachment() != 20335.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_verify_db_file_checksum() != 56070.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_write_to_backup_on_error() != 25235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportservice_complete_save_as_on_error() != 25150.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportservice_create_kdbx() != 31333.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportservice_save_key_file() != 63653.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_eventdispatch_send_otp_update() != 7119.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_eventdispatch_send_tick_update() != 63104.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_all_entries_on_db_open() != 3998.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_complete_save_as_on_error() != 682.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_copy_file_to_app_group() != 55345.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_copy_last_backup_to_temp_file() != 7066.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_delete_book_mark_data() != 12126.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_list_app_group_db_files() != 558.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_load_book_mark_data() != 25936.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_read_kdbx_from_app_group() != 28200.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_iossupportservice_save_book_mark_data() != 62381.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_error_json_string() != 52157.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_form_with_file_name() != 2775.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_map_as_ok_json_string() != 33764.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_ok_json_string() != 54475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_constructor_androidsupportservice_new() != 1248.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_constructor_iossupportservice_new() != 1185.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_constructor_jsonservice_new() != 7271.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_app_home_dir() != 32526.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_app_group_home_dir() != 25448.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_cache_dir() != 56663.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_temp_dir() != 13364.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_load_language_translation() != 37179.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_name() != 18616.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_info() != 38559.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_securekeyoperation_store_key() != 55442.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_securekeyoperation_get_key() != 9305.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_securekeyoperation_delete_key() != 49392.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}



// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject: Disposable, AutoCloseable {

    constructor(pointer: Pointer) {
        this.pointer = pointer
    }

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
    }

    protected val pointer: Pointer?
    protected abstract val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open fun uniffiClonePointer(): Pointer {
        // Overridden by generated subclasses, the default method exists to allow users to manually
        // implement the interface
        throw RuntimeException("uniffiClonePointer not implemented")
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }
}

/** Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly. */
object NoPointer


public interface AndroidSupportServiceInterface {
    
    fun `completeSaveAsOnError`(`fileDescriptor`: ULong, `oldFullFileNameUri`: String, `newFullFileNameUri`: String): ApiResponse
    
    fun `createKdbx`(`fileDescriptor`: ULong, `jsonArgs`: String): ApiResponse
    
    fun `saveKeyFile`(`fileDescriptor`: ULong, `fullKeyFileName`: String): String
    
    companion object
}
open class AndroidSupportService : FFIObject, AndroidSupportServiceInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_constructor_androidsupportservice_new(_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_androidsupportservice(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_androidsupportservice(pointer!!, status)
        }
    }

    override fun `completeSaveAsOnError`(`fileDescriptor`: ULong, `oldFullFileNameUri`: String, `newFullFileNameUri`: String): ApiResponse =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportservice_complete_save_as_on_error(it,
        FfiConverterULong.lower(`fileDescriptor`),FfiConverterString.lower(`oldFullFileNameUri`),FfiConverterString.lower(`newFullFileNameUri`),
        _status)
}
        }.let {
            FfiConverterTypeApiResponse.lift(it)
        }
    
    override fun `createKdbx`(`fileDescriptor`: ULong, `jsonArgs`: String): ApiResponse =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportservice_create_kdbx(it,
        FfiConverterULong.lower(`fileDescriptor`),FfiConverterString.lower(`jsonArgs`),
        _status)
}
        }.let {
            FfiConverterTypeApiResponse.lift(it)
        }
    
    override fun `saveKeyFile`(`fileDescriptor`: ULong, `fullKeyFileName`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportservice_save_key_file(it,
        FfiConverterULong.lower(`fileDescriptor`),FfiConverterString.lower(`fullKeyFileName`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeAndroidSupportService: FfiConverter<AndroidSupportService, Pointer> {

    override fun lower(value: AndroidSupportService): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): AndroidSupportService {
        return AndroidSupportService(value)
    }

    override fun read(buf: ByteBuffer): AndroidSupportService {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AndroidSupportService) = 8

    override fun write(value: AndroidSupportService, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface EventDispatch {
    
    fun `sendOtpUpdate`(`jsonString`: String)
    
    fun `sendTickUpdate`(`jsonString`: String)
    
    companion object
}
open class EventDispatchImpl : FFIObject, EventDispatch {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_eventdispatch(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_eventdispatch(pointer!!, status)
        }
    }

    
    @Throws(ApiCallbackException::class)override fun `sendOtpUpdate`(`jsonString`: String) =
        callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_eventdispatch_send_otp_update(it,
        FfiConverterString.lower(`jsonString`),
        _status)
}
        }
    
    
    
    @Throws(ApiCallbackException::class)override fun `sendTickUpdate`(`jsonString`: String) =
        callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_eventdispatch_send_tick_update(it,
        FfiConverterString.lower(`jsonString`),
        _status)
}
        }
    
    
    

    
    companion object
    
}


internal typealias UniffiHandle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<UniffiHandle, T> = mutableMapOf(),
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): UniffiHandle =
        lock.withLock {
            currentHandle.getAndAdd(stride)
                .also { handle ->
                    leftMap[handle] = obj
                }
            }

    fun get(handle: UniffiHandle) = lock.withLock {
        leftMap[handle] ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    fun delete(handle: UniffiHandle) {
        this.remove(handle)
    }

    fun remove(handle: UniffiHandle): T? =
        lock.withLock {
            leftMap.remove(handle)
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>: FfiConverter<CallbackInterface, UniffiHandle> {
    internal val handleMap = ConcurrentHandleMap<CallbackInterface>()

    internal fun drop(handle: UniffiHandle) {
        handleMap.remove(handle)
    }

    override fun lift(value: UniffiHandle): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Implement the foreign callback handler for EventDispatch
internal class UniffiCallbackInterfaceEventDispatch : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeEventDispatch.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeEventDispatch.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeSendOtpUpdate`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeSendTickUpdate`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeSendOtpUpdate`(kotlinCallbackInterface: EventDispatch, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`sendOtpUpdate`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: ApiCallbackException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeApiCallbackError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeSendTickUpdate`(kotlinCallbackInterface: EventDispatch, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`sendTickUpdate`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: ApiCallbackException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeApiCallbackError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_eventdispatch(this)
    }
}

internal val uniffiCallbackInterfaceEventDispatch = UniffiCallbackInterfaceEventDispatch()

public object FfiConverterTypeEventDispatch: FfiConverter<EventDispatch, Pointer> {
    internal val handleMap = ConcurrentHandleMap<EventDispatch>()

    override fun lower(value: EventDispatch): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): EventDispatch {
        return EventDispatchImpl(value)
    }

    override fun read(buf: ByteBuffer): EventDispatch {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EventDispatch) = 8

    override fun write(value: EventDispatch, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface IosSupportServiceInterface {
    
    fun `allEntriesOnDbOpen`(`jsonArgs`: String): String
    
    fun `completeSaveAsOnError`(`jsonArgs`: String): String
    
    fun `copyFileToAppGroup`(`jsonArgs`: String): String
    
    fun `copyLastBackupToTempFile`(`kdbxFileName`: String, `fullFileNameUri`: String): String?
    
    fun `deleteBookMarkData`(`fullFileNameUri`: String)
    
    fun `listAppGroupDbFiles`(): String
    
    fun `loadBookMarkData`(`url`: String): List<UByte>
    
    fun `readKdbxFromAppGroup`(`jsonArgs`: String): String
    
    fun `saveBookMarkData`(`url`: String, `data`: List<UByte>): Boolean
    
    companion object
}
open class IosSupportService : FFIObject, IosSupportServiceInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_constructor_iossupportservice_new(_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_iossupportservice(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_iossupportservice(pointer!!, status)
        }
    }

    override fun `allEntriesOnDbOpen`(`jsonArgs`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_all_entries_on_db_open(it,
        FfiConverterString.lower(`jsonArgs`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `completeSaveAsOnError`(`jsonArgs`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_complete_save_as_on_error(it,
        FfiConverterString.lower(`jsonArgs`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `copyFileToAppGroup`(`jsonArgs`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_copy_file_to_app_group(it,
        FfiConverterString.lower(`jsonArgs`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `copyLastBackupToTempFile`(`kdbxFileName`: String, `fullFileNameUri`: String): String? =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_copy_last_backup_to_temp_file(it,
        FfiConverterString.lower(`kdbxFileName`),FfiConverterString.lower(`fullFileNameUri`),
        _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    override fun `deleteBookMarkData`(`fullFileNameUri`: String) =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_delete_book_mark_data(it,
        FfiConverterString.lower(`fullFileNameUri`),
        _status)
}
        }
    
    
    override fun `listAppGroupDbFiles`(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_list_app_group_db_files(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `loadBookMarkData`(`url`: String): List<UByte> =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_load_book_mark_data(it,
        FfiConverterString.lower(`url`),
        _status)
}
        }.let {
            FfiConverterSequenceUByte.lift(it)
        }
    
    override fun `readKdbxFromAppGroup`(`jsonArgs`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_read_kdbx_from_app_group(it,
        FfiConverterString.lower(`jsonArgs`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `saveBookMarkData`(`url`: String, `data`: List<UByte>): Boolean =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_iossupportservice_save_book_mark_data(it,
        FfiConverterString.lower(`url`),FfiConverterSequenceUByte.lower(`data`),
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeIosSupportService: FfiConverter<IosSupportService, Pointer> {

    override fun lower(value: IosSupportService): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): IosSupportService {
        return IosSupportService(value)
    }

    override fun read(buf: ByteBuffer): IosSupportService {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: IosSupportService) = 8

    override fun write(value: IosSupportService, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface JsonServiceInterface {
    
    fun `errorJsonString`(`error`: String): String
    
    fun `formWithFileName`(`fullFileNameUri`: String): String
    
    fun `mapAsOkJsonString`(`info`: Map<String, String>): String
    
    fun `okJsonString`(`info`: String): String
    
    companion object
}
open class JsonService : FFIObject, JsonServiceInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_constructor_jsonservice_new(_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_jsonservice(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_jsonservice(pointer!!, status)
        }
    }

    override fun `errorJsonString`(`error`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_error_json_string(it,
        FfiConverterString.lower(`error`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `formWithFileName`(`fullFileNameUri`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_form_with_file_name(it,
        FfiConverterString.lower(`fullFileNameUri`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `mapAsOkJsonString`(`info`: Map<String, String>): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_map_as_ok_json_string(it,
        FfiConverterMapStringString.lower(`info`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `okJsonString`(`info`: String): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_ok_json_string(it,
        FfiConverterString.lower(`info`),
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeJsonService: FfiConverter<JsonService, Pointer> {

    override fun lower(value: JsonService): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): JsonService {
        return JsonService(value)
    }

    override fun read(buf: ByteBuffer): JsonService {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: JsonService) = 8

    override fun write(value: JsonService, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class FileInfo (
    var `fileName`: String?, 
    var `fileSize`: Long?, 
    var `lastModified`: Long?, 
    var `location`: String?
) {
    
    companion object
}

public object FfiConverterTypeFileInfo: FfiConverterRustBuffer<FileInfo> {
    override fun read(buf: ByteBuffer): FileInfo {
        return FileInfo(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: FileInfo) = (
            FfiConverterOptionalString.allocationSize(value.`fileName`) +
            FfiConverterOptionalLong.allocationSize(value.`fileSize`) +
            FfiConverterOptionalLong.allocationSize(value.`lastModified`) +
            FfiConverterOptionalString.allocationSize(value.`location`)
    )

    override fun write(value: FileInfo, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`fileName`, buf)
            FfiConverterOptionalLong.write(value.`fileSize`, buf)
            FfiConverterOptionalLong.write(value.`lastModified`, buf)
            FfiConverterOptionalString.write(value.`location`, buf)
    }
}



data class KdbxCreated (
    var `buffer`: List<UByte>, 
    var `apiResponse`: String
) {
    
    companion object
}

public object FfiConverterTypeKdbxCreated: FfiConverterRustBuffer<KdbxCreated> {
    override fun read(buf: ByteBuffer): KdbxCreated {
        return KdbxCreated(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: KdbxCreated) = (
            FfiConverterSequenceUByte.allocationSize(value.`buffer`) +
            FfiConverterString.allocationSize(value.`apiResponse`)
    )

    override fun write(value: KdbxCreated, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`buffer`, buf)
            FfiConverterString.write(value.`apiResponse`, buf)
    }
}





sealed class ApiCallbackException: Exception() {
    
    class InternalCallbackException(
        
        val `reason`: String
        ) : ApiCallbackException() {
        override val message
            get() = "reason=${ `reason` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ApiCallbackException> {
        override fun lift(error_buf: RustBuffer.ByValue): ApiCallbackException = FfiConverterTypeApiCallbackError.lift(error_buf)
    }

    
}

public object FfiConverterTypeApiCallbackError : FfiConverterRustBuffer<ApiCallbackException> {
    override fun read(buf: ByteBuffer): ApiCallbackException {
        

        return when(buf.getInt()) {
            1 -> ApiCallbackException.InternalCallbackException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ApiCallbackException): Int {
        return when(value) {
            is ApiCallbackException.InternalCallbackException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`reason`)
            )
        }
    }

    override fun write(value: ApiCallbackException, buf: ByteBuffer) {
        when(value) {
            is ApiCallbackException.InternalCallbackException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`reason`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class ApiResponse {
    
    data class Success(
        
        val `result`: String
        ) : ApiResponse() {
        companion object
    }
    
    data class Failure(
        
        val `result`: String
        ) : ApiResponse() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeApiResponse : FfiConverterRustBuffer<ApiResponse>{
    override fun read(buf: ByteBuffer): ApiResponse {
        return when(buf.getInt()) {
            1 -> ApiResponse.Success(
                FfiConverterString.read(buf),
                )
            2 -> ApiResponse.Failure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ApiResponse) = when(value) {
        is ApiResponse.Success -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`result`)
            )
        }
        is ApiResponse.Failure -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`result`)
            )
        }
    }

    override fun write(value: ApiResponse, buf: ByteBuffer) {
        when(value) {
            is ApiResponse.Success -> {
                buf.putInt(1)
                FfiConverterString.write(value.`result`, buf)
                Unit
            }
            is ApiResponse.Failure -> {
                buf.putInt(2)
                FfiConverterString.write(value.`result`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class FileArgs {
    
    data class FileDecriptor(
        
        val `fd`: ULong
        ) : FileArgs() {
        companion object
    }
    
    data class FileDecriptorWithFullFileName(
        
        val `fd`: ULong, 
        
        val `fullFileName`: String, 
        
        val `fileName`: String
        ) : FileArgs() {
        companion object
    }
    
    data class FullFileName(
        
        val `fullFileName`: String
        ) : FileArgs() {
        companion object
    }
    
    data class FileNameWithDir(
        
        val `dirPath`: String, 
        
        val `fileName`: String
        ) : FileArgs() {
        companion object
    }
    

    
    companion object
}

public object FfiConverterTypeFileArgs : FfiConverterRustBuffer<FileArgs>{
    override fun read(buf: ByteBuffer): FileArgs {
        return when(buf.getInt()) {
            1 -> FileArgs.FileDecriptor(
                FfiConverterULong.read(buf),
                )
            2 -> FileArgs.FileDecriptorWithFullFileName(
                FfiConverterULong.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> FileArgs.FullFileName(
                FfiConverterString.read(buf),
                )
            4 -> FileArgs.FileNameWithDir(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: FileArgs) = when(value) {
        is FileArgs.FileDecriptor -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`fd`)
            )
        }
        is FileArgs.FileDecriptorWithFullFileName -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`fd`)
                + FfiConverterString.allocationSize(value.`fullFileName`)
                + FfiConverterString.allocationSize(value.`fileName`)
            )
        }
        is FileArgs.FullFileName -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`fullFileName`)
            )
        }
        is FileArgs.FileNameWithDir -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`dirPath`)
                + FfiConverterString.allocationSize(value.`fileName`)
            )
        }
    }

    override fun write(value: FileArgs, buf: ByteBuffer) {
        when(value) {
            is FileArgs.FileDecriptor -> {
                buf.putInt(1)
                FfiConverterULong.write(value.`fd`, buf)
                Unit
            }
            is FileArgs.FileDecriptorWithFullFileName -> {
                buf.putInt(2)
                FfiConverterULong.write(value.`fd`, buf)
                FfiConverterString.write(value.`fullFileName`, buf)
                FfiConverterString.write(value.`fileName`, buf)
                Unit
            }
            is FileArgs.FullFileName -> {
                buf.putInt(3)
                FfiConverterString.write(value.`fullFileName`, buf)
                Unit
            }
            is FileArgs.FileNameWithDir -> {
                buf.putInt(4)
                FfiConverterString.write(value.`dirPath`, buf)
                FfiConverterString.write(value.`fileName`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class SecureKeyOperationException(message: String): Exception(message) {
        
        class StoringKeyException(message: String) : SecureKeyOperationException(message)
        
        class StoringKeyDuplicateItemException(message: String) : SecureKeyOperationException(message)
        
        class QueryKeyException(message: String) : SecureKeyOperationException(message)
        
        class DeleteKeyException(message: String) : SecureKeyOperationException(message)
        
        class InternalSecureKeyOperationException(message: String) : SecureKeyOperationException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SecureKeyOperationException> {
        override fun lift(error_buf: RustBuffer.ByValue): SecureKeyOperationException = FfiConverterTypeSecureKeyOperationError.lift(error_buf)
    }
}

public object FfiConverterTypeSecureKeyOperationError : FfiConverterRustBuffer<SecureKeyOperationException> {
    override fun read(buf: ByteBuffer): SecureKeyOperationException {
        
            return when(buf.getInt()) {
            1 -> SecureKeyOperationException.StoringKeyException(FfiConverterString.read(buf))
            2 -> SecureKeyOperationException.StoringKeyDuplicateItemException(FfiConverterString.read(buf))
            3 -> SecureKeyOperationException.QueryKeyException(FfiConverterString.read(buf))
            4 -> SecureKeyOperationException.DeleteKeyException(FfiConverterString.read(buf))
            5 -> SecureKeyOperationException.InternalSecureKeyOperationException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SecureKeyOperationException): Int {
        return 4
    }

    override fun write(value: SecureKeyOperationException, buf: ByteBuffer) {
        when(value) {
            is SecureKeyOperationException.StoringKeyException -> {
                buf.putInt(1)
                Unit
            }
            is SecureKeyOperationException.StoringKeyDuplicateItemException -> {
                buf.putInt(2)
                Unit
            }
            is SecureKeyOperationException.QueryKeyException -> {
                buf.putInt(3)
                Unit
            }
            is SecureKeyOperationException.DeleteKeyException -> {
                buf.putInt(4)
                Unit
            }
            is SecureKeyOperationException.InternalSecureKeyOperationException -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





public interface CommonDeviceService {
    
    fun `appHomeDir`(): String
    
    fun `appGroupHomeDir`(): String?
    
    fun `cacheDir`(): String
    
    fun `tempDir`(): String
    
    fun `loadLanguageTranslation`(`languageId`: String): String?
    
    fun `uriToFileName`(`fullFileNameUri`: String): String?
    
    fun `uriToFileInfo`(`fullFileNameUri`: String): FileInfo?
    
    companion object
}


// Implement the foreign callback handler for CommonDeviceService
internal class UniffiCallbackInterfaceCommonDeviceService : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeCommonDeviceService.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeCommonDeviceService.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeAppHomeDir`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeAppGroupHomeDir`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            3 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeCacheDir`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            4 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeTempDir`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            5 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeLoadLanguageTranslation`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            6 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeUriToFileName`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            7 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeUriToFileInfo`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeAppHomeDir`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`appHomeDir`(
            )
            outBuf.setValue(FfiConverterString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeAppGroupHomeDir`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`appGroupHomeDir`(
            )
            outBuf.setValue(FfiConverterOptionalString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeCacheDir`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`cacheDir`(
            )
            outBuf.setValue(FfiConverterString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeTempDir`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`tempDir`(
            )
            outBuf.setValue(FfiConverterString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeLoadLanguageTranslation`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`loadLanguageTranslation`(
                FfiConverterString.read(argsBuf)
                
            )
            outBuf.setValue(FfiConverterOptionalString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeUriToFileName`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`uriToFileName`(
                FfiConverterString.read(argsBuf)
                
            )
            outBuf.setValue(FfiConverterOptionalString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeUriToFileInfo`(kotlinCallbackInterface: CommonDeviceService, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`uriToFileInfo`(
                FfiConverterString.read(argsBuf)
                
            )
            outBuf.setValue(FfiConverterOptionalTypeFileInfo.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }
    

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_commondeviceservice(this)
    }
}

internal val uniffiCallbackInterfaceCommonDeviceService = UniffiCallbackInterfaceCommonDeviceService()

// The ffiConverter which transforms the Callbacks in to UniffiHandles to pass to Rust.
public object FfiConverterTypeCommonDeviceService: FfiConverterCallbackInterface<CommonDeviceService>()





public interface SecureKeyOperation {
    
    fun `storeKey`(`dbKey`: String, `encKeyData`: String)
    
    fun `getKey`(`dbKey`: String): String?
    
    fun `deleteKey`(`dbKey`: String)
    
    companion object
}


// Implement the foreign callback handler for SecureKeyOperation
internal class UniffiCallbackInterfaceSecureKeyOperation : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeSecureKeyOperation.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeSecureKeyOperation.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeStoreKey`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeGetKey`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            3 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeDeleteKey`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeStoreKey`(kotlinCallbackInterface: SecureKeyOperation, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`storeKey`(
                FfiConverterString.read(argsBuf), 
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: SecureKeyOperationException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeSecureKeyOperationError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeGetKey`(kotlinCallbackInterface: SecureKeyOperation, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`getKey`(
                FfiConverterString.read(argsBuf)
                
            )
            outBuf.setValue(FfiConverterOptionalString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: SecureKeyOperationException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeSecureKeyOperationError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeDeleteKey`(kotlinCallbackInterface: SecureKeyOperation, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`deleteKey`(
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: SecureKeyOperationException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeSecureKeyOperationError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_securekeyoperation(this)
    }
}

internal val uniffiCallbackInterfaceSecureKeyOperation = UniffiCallbackInterfaceSecureKeyOperation()

// The ffiConverter which transforms the Callbacks in to UniffiHandles to pass to Rust.
public object FfiConverterTypeSecureKeyOperation: FfiConverterCallbackInterface<SecureKeyOperation>()




public object FfiConverterOptionalLong: FfiConverterRustBuffer<Long?> {
    override fun read(buf: ByteBuffer): Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: Long?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFileInfo: FfiConverterRustBuffer<FileInfo?> {
    override fun read(buf: ByteBuffer): FileInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFileInfo.read(buf)
    }

    override fun allocationSize(value: FileInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFileInfo.allocationSize(value)
        }
    }

    override fun write(value: FileInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFileInfo.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}



public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<String, String>> {
    override fun read(buf: ByteBuffer): Map<String, String> {
        val len = buf.getInt()
        return buildMap<String, String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<String, String>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<String, String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
}

fun `copyPickedKeyFile`(`fileArgs`: FileArgs): String {
    return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_copy_picked_key_file(FfiConverterTypeFileArgs.lower(`fileArgs`),_status)
})
}


fun `createTempKdbx`(`fileArgs`: FileArgs, `jsonArgs`: String): ApiResponse {
    return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_create_temp_kdbx(FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
})
}


fun `dbServiceEnableLogging`() =
    
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_db_service_enable_logging(_status)
}



fun `dbServiceInitialize`(`commonDeviceService`: CommonDeviceService, `secureKeyOperation`: SecureKeyOperation, `eventDispatcher`: EventDispatch) =
    
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_db_service_initialize(FfiConverterTypeCommonDeviceService.lower(`commonDeviceService`),FfiConverterTypeSecureKeyOperation.lower(`secureKeyOperation`),FfiConverterTypeEventDispatch.lower(`eventDispatcher`),_status)
}



fun `extractFileProvider`(`fullFileNameUri`: String): String {
    return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_extract_file_provider(FfiConverterString.lower(`fullFileNameUri`),_status)
})
}


fun `invokeCommand`(`commandName`: String, `args`: String): String {
    return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_invoke_command(FfiConverterString.lower(`commandName`),FfiConverterString.lower(`args`),_status)
})
}


fun `readKdbx`(`fileArgs`: FileArgs, `jsonArgs`: String): ApiResponse {
    return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_read_kdbx(FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
})
}


fun `saveKdbx`(`fileArgs`: FileArgs, `overwrite`: Boolean): ApiResponse {
    return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_save_kdbx(FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterBoolean.lower(`overwrite`),_status)
})
}


fun `uploadAttachment`(`fileArgs`: FileArgs, `jsonArgs`: String): String {
    return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_upload_attachment(FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
})
}


fun `verifyDbFileChecksum`(`fileArgs`: FileArgs): ApiResponse {
    return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_verify_db_file_checksum(FfiConverterTypeFileArgs.lower(`fileArgs`),_status)
})
}


fun `writeToBackupOnError`(`fullFileNameUri`: String): ApiResponse {
    return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_write_to_backup_on_error(FfiConverterString.lower(`fullFileNameUri`),_status)
})
}


