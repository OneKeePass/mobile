// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package onekeepass.mobile.ffi

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_db_service_ffi_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_db_service_ffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "db_service_ffi"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod3 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod4 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`languageId`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod5 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`fullFileNameUri`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceMethod6 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`fullFileNameUri`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSecureKeyOperationMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`dbKey`: RustBuffer.ByValue,`encKeyData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSecureKeyOperationMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`dbKey`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSecureKeyOperationMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`dbKey`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEventDispatchMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`jsonString`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEventDispatchMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`jsonString`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAndroidApiServiceMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`clipData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAndroidApiServiceMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceAndroidApiServiceMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`autoFillData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceCommonDeviceServiceExMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`clipData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSecureEnclaveCbServiceMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`identifier`: RustBuffer.ByValue,`plainData`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSecureEnclaveCbServiceMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`identifier`: RustBuffer.ByValue,`encryptedData`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceSecureEnclaveCbServiceMethod2 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`identifier`: RustBuffer.ByValue,`uniffiOutReturn`: ByteByReference,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("appHomeDir", "appGroupHomeDir", "cacheDir", "tempDir", "loadLanguageTranslation", "uriToFileName", "uriToFileInfo", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceCommonDeviceService(
    @JvmField internal var `appHomeDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod0? = null,
    @JvmField internal var `appGroupHomeDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod1? = null,
    @JvmField internal var `cacheDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod2? = null,
    @JvmField internal var `tempDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod3? = null,
    @JvmField internal var `loadLanguageTranslation`: UniffiCallbackInterfaceCommonDeviceServiceMethod4? = null,
    @JvmField internal var `uriToFileName`: UniffiCallbackInterfaceCommonDeviceServiceMethod5? = null,
    @JvmField internal var `uriToFileInfo`: UniffiCallbackInterfaceCommonDeviceServiceMethod6? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `appHomeDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod0? = null,
        `appGroupHomeDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod1? = null,
        `cacheDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod2? = null,
        `tempDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod3? = null,
        `loadLanguageTranslation`: UniffiCallbackInterfaceCommonDeviceServiceMethod4? = null,
        `uriToFileName`: UniffiCallbackInterfaceCommonDeviceServiceMethod5? = null,
        `uriToFileInfo`: UniffiCallbackInterfaceCommonDeviceServiceMethod6? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceCommonDeviceService(`appHomeDir`,`appGroupHomeDir`,`cacheDir`,`tempDir`,`loadLanguageTranslation`,`uriToFileName`,`uriToFileInfo`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceCommonDeviceService) {
        `appHomeDir` = other.`appHomeDir`
        `appGroupHomeDir` = other.`appGroupHomeDir`
        `cacheDir` = other.`cacheDir`
        `tempDir` = other.`tempDir`
        `loadLanguageTranslation` = other.`loadLanguageTranslation`
        `uriToFileName` = other.`uriToFileName`
        `uriToFileInfo` = other.`uriToFileInfo`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("storeKey", "getKey", "deleteKey", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceSecureKeyOperation(
    @JvmField internal var `storeKey`: UniffiCallbackInterfaceSecureKeyOperationMethod0? = null,
    @JvmField internal var `getKey`: UniffiCallbackInterfaceSecureKeyOperationMethod1? = null,
    @JvmField internal var `deleteKey`: UniffiCallbackInterfaceSecureKeyOperationMethod2? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `storeKey`: UniffiCallbackInterfaceSecureKeyOperationMethod0? = null,
        `getKey`: UniffiCallbackInterfaceSecureKeyOperationMethod1? = null,
        `deleteKey`: UniffiCallbackInterfaceSecureKeyOperationMethod2? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceSecureKeyOperation(`storeKey`,`getKey`,`deleteKey`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceSecureKeyOperation) {
        `storeKey` = other.`storeKey`
        `getKey` = other.`getKey`
        `deleteKey` = other.`deleteKey`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("sendOtpUpdate", "sendTickUpdate", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceEventDispatch(
    @JvmField internal var `sendOtpUpdate`: UniffiCallbackInterfaceEventDispatchMethod0? = null,
    @JvmField internal var `sendTickUpdate`: UniffiCallbackInterfaceEventDispatchMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `sendOtpUpdate`: UniffiCallbackInterfaceEventDispatchMethod0? = null,
        `sendTickUpdate`: UniffiCallbackInterfaceEventDispatchMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceEventDispatch(`sendOtpUpdate`,`sendTickUpdate`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceEventDispatch) {
        `sendOtpUpdate` = other.`sendOtpUpdate`
        `sendTickUpdate` = other.`sendTickUpdate`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("clipboardCopyString", "autofillClientAppUrlInfo", "completeAutofill", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceAndroidApiService(
    @JvmField internal var `clipboardCopyString`: UniffiCallbackInterfaceAndroidApiServiceMethod0? = null,
    @JvmField internal var `autofillClientAppUrlInfo`: UniffiCallbackInterfaceAndroidApiServiceMethod1? = null,
    @JvmField internal var `completeAutofill`: UniffiCallbackInterfaceAndroidApiServiceMethod2? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `clipboardCopyString`: UniffiCallbackInterfaceAndroidApiServiceMethod0? = null,
        `autofillClientAppUrlInfo`: UniffiCallbackInterfaceAndroidApiServiceMethod1? = null,
        `completeAutofill`: UniffiCallbackInterfaceAndroidApiServiceMethod2? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceAndroidApiService(`clipboardCopyString`,`autofillClientAppUrlInfo`,`completeAutofill`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceAndroidApiService) {
        `clipboardCopyString` = other.`clipboardCopyString`
        `autofillClientAppUrlInfo` = other.`autofillClientAppUrlInfo`
        `completeAutofill` = other.`completeAutofill`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("clipboardCopyString", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceCommonDeviceServiceEx(
    @JvmField internal var `clipboardCopyString`: UniffiCallbackInterfaceCommonDeviceServiceExMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `clipboardCopyString`: UniffiCallbackInterfaceCommonDeviceServiceExMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceCommonDeviceServiceEx(`clipboardCopyString`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceCommonDeviceServiceEx) {
        `clipboardCopyString` = other.`clipboardCopyString`
        `uniffiFree` = other.`uniffiFree`
    }

}
@Structure.FieldOrder("encryptBytes", "decryptBytes", "removeKey", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceSecureEnclaveCbService(
    @JvmField internal var `encryptBytes`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod0? = null,
    @JvmField internal var `decryptBytes`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod1? = null,
    @JvmField internal var `removeKey`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod2? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `encryptBytes`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod0? = null,
        `decryptBytes`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod1? = null,
        `removeKey`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod2? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceSecureEnclaveCbService(`encryptBytes`,`decryptBytes`,`removeKey`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceSecureEnclaveCbService) {
        `encryptBytes` = other.`encryptBytes`
        `decryptBytes` = other.`decryptBytes`
        `removeKey` = other.`removeKey`
        `uniffiFree` = other.`uniffiFree`
    }

}






















































































































































// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "db_service")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                uniffiCallbackInterfaceAndroidApiService.register(lib)
                uniffiCallbackInterfaceCommonDeviceServiceEx.register(lib)
                uniffiCallbackInterfaceEventDispatch.register(lib)
                uniffiCallbackInterfaceSecureEnclaveCbService.register(lib)
                uniffiCallbackInterfaceCommonDeviceService.register(lib)
                uniffiCallbackInterfaceSecureKeyOperation.register(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_db_service_ffi_fn_clone_eventdispatch(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_eventdispatch(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_vtable_eventdispatch(`vtable`: UniffiVTableCallbackInterfaceEventDispatch,
    ): Unit
    fun uniffi_db_service_ffi_fn_method_eventdispatch_send_otp_update(`ptr`: Pointer,`jsonString`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_method_eventdispatch_send_tick_update(`ptr`: Pointer,`jsonString`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_clone_jsonservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_jsonservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_constructor_jsonservice_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_method_jsonservice_error_json_string(`ptr`: Pointer,`error`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_jsonservice_form_with_file_name(`ptr`: Pointer,`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_jsonservice_map_as_ok_json_string(`ptr`: Pointer,`info`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_jsonservice_ok_json_string(`ptr`: Pointer,`info`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_clone_androidapiservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_androidapiservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_vtable_androidapiservice(`vtable`: UniffiVTableCallbackInterfaceAndroidApiService,
    ): Unit
    fun uniffi_db_service_ffi_fn_method_androidapiservice_clipboard_copy_string(`ptr`: Pointer,`clipData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_method_androidapiservice_autofill_client_app_url_info(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_androidapiservice_complete_autofill(`ptr`: Pointer,`autoFillData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_clone_androidsupportserviceextra(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_androidsupportserviceextra(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_constructor_androidsupportserviceextra_new(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_method_androidsupportserviceextra_complete_save_as_on_error(`ptr`: Pointer,`fileDescriptor`: Long,`oldFullFileNameUri`: RustBuffer.ByValue,`newFullFileNameUri`: RustBuffer.ByValue,`fileName`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_androidsupportserviceextra_create_kdbx(`ptr`: Pointer,`fileDescriptor`: Long,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_androidsupportserviceextra_invoke(`ptr`: Pointer,`commandName`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_androidsupportserviceextra_save_key_file(`ptr`: Pointer,`fileDescriptor`: Long,`fullKeyFileName`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_clone_commondeviceserviceex(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_commondeviceserviceex(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_vtable_commondeviceserviceex(`vtable`: UniffiVTableCallbackInterfaceCommonDeviceServiceEx,
    ): Unit
    fun uniffi_db_service_ffi_fn_method_commondeviceserviceex_clipboard_copy_string(`ptr`: Pointer,`clipData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_clone_secureenclavecbservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_db_service_ffi_fn_free_secureenclavecbservice(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_vtable_secureenclavecbservice(`vtable`: UniffiVTableCallbackInterfaceSecureEnclaveCbService,
    ): Unit
    fun uniffi_db_service_ffi_fn_method_secureenclavecbservice_encrypt_bytes(`ptr`: Pointer,`identifier`: RustBuffer.ByValue,`plainData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_secureenclavecbservice_decrypt_bytes(`ptr`: Pointer,`identifier`: RustBuffer.ByValue,`encryptedData`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_method_secureenclavecbservice_remove_key(`ptr`: Pointer,`identifier`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_db_service_ffi_fn_init_callback_vtable_commondeviceservice(`vtable`: UniffiVTableCallbackInterfaceCommonDeviceService,
    ): Unit
    fun uniffi_db_service_ffi_fn_init_callback_vtable_securekeyoperation(`vtable`: UniffiVTableCallbackInterfaceSecureKeyOperation,
    ): Unit
    fun uniffi_db_service_ffi_fn_func_copy_picked_key_file(`fileArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_create_temp_kdbx(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_db_service_enable_logging(uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_func_extract_file_provider(`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_invoke_command(`commandName`: RustBuffer.ByValue,`args`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_read_kdbx(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_save_kdbx(`fileArgs`: RustBuffer.ByValue,`overwrite`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_upload_attachment(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_verify_db_file_checksum(`fileArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_write_to_backup_on_error(`fullFileNameUri`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_db_service_ffi_fn_func_android_callback_service_initialize(`androidApiService`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_func_db_service_initialize(`commonDeviceService`: Long,`secureKeyOperation`: Long,`eventDispatcher`: Pointer,`commonDeviceServiceEx`: Pointer,`secureEnclaveCbService`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_fn_func_handle_picked_file(`fileArgs`: RustBuffer.ByValue,`jsonArgs`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_db_service_ffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u8(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u8(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_db_service_ffi_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i8(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i8(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_db_service_ffi_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u16(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u16(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_db_service_ffi_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i16(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i16(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_db_service_ffi_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u32(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u32(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_db_service_ffi_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i32(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i32(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_db_service_ffi_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_u64(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_u64(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_db_service_ffi_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_i64(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_i64(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_db_service_ffi_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_f32(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_f32(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_db_service_ffi_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_f64(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_f64(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_db_service_ffi_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_pointer(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_pointer(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_db_service_ffi_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_rust_buffer(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_db_service_ffi_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_cancel_void(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_free_void(`handle`: Long,
    ): Unit
    fun ffi_db_service_ffi_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_db_service_ffi_checksum_func_copy_picked_key_file(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_create_temp_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_db_service_enable_logging(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_extract_file_provider(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_invoke_command(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_read_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_save_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_upload_attachment(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_verify_db_file_checksum(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_write_to_backup_on_error(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_android_callback_service_initialize(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_db_service_initialize(
    ): Short
    fun uniffi_db_service_ffi_checksum_func_handle_picked_file(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_eventdispatch_send_otp_update(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_eventdispatch_send_tick_update(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_error_json_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_form_with_file_name(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_map_as_ok_json_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_jsonservice_ok_json_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidapiservice_clipboard_copy_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidapiservice_autofill_client_app_url_info(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidapiservice_complete_autofill(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_complete_save_as_on_error(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_create_kdbx(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_invoke(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_save_key_file(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceserviceex_clipboard_copy_string(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_secureenclavecbservice_encrypt_bytes(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_secureenclavecbservice_decrypt_bytes(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_secureenclavecbservice_remove_key(
    ): Short
    fun uniffi_db_service_ffi_checksum_constructor_jsonservice_new(
    ): Short
    fun uniffi_db_service_ffi_checksum_constructor_androidsupportserviceextra_new(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_app_home_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_app_group_home_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_cache_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_temp_dir(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_load_language_translation(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_name(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_info(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_securekeyoperation_store_key(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_securekeyoperation_get_key(
    ): Short
    fun uniffi_db_service_ffi_checksum_method_securekeyoperation_delete_key(
    ): Short
    fun ffi_db_service_ffi_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_db_service_ffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_db_service_ffi_checksum_func_copy_picked_key_file() != 35177.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_create_temp_kdbx() != 3510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_db_service_enable_logging() != 27628.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_extract_file_provider() != 63250.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_invoke_command() != 63733.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_read_kdbx() != 27336.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_save_kdbx() != 47740.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_upload_attachment() != 20335.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_verify_db_file_checksum() != 56070.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_write_to_backup_on_error() != 25235.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_android_callback_service_initialize() != 3941.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_db_service_initialize() != 37733.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_func_handle_picked_file() != 62434.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_eventdispatch_send_otp_update() != 7119.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_eventdispatch_send_tick_update() != 63104.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_error_json_string() != 52157.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_form_with_file_name() != 2775.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_map_as_ok_json_string() != 33764.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_jsonservice_ok_json_string() != 54475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidapiservice_clipboard_copy_string() != 49453.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidapiservice_autofill_client_app_url_info() != 15642.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidapiservice_complete_autofill() != 29361.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_complete_save_as_on_error() != 15929.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_create_kdbx() != 49847.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_invoke() != 39395.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_androidsupportserviceextra_save_key_file() != 58983.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceserviceex_clipboard_copy_string() != 45908.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_secureenclavecbservice_encrypt_bytes() != 4689.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_secureenclavecbservice_decrypt_bytes() != 596.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_secureenclavecbservice_remove_key() != 60936.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_constructor_jsonservice_new() != 13724.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_constructor_androidsupportserviceextra_new() != 20320.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_app_home_dir() != 32526.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_app_group_home_dir() != 25448.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_cache_dir() != 56663.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_temp_dir() != 13364.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_load_language_translation() != 37179.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_name() != 18616.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_commondeviceservice_uri_to_file_info() != 38559.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_securekeyoperation_store_key() != 55442.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_securekeyoperation_get_key() != 9305.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_db_service_ffi_checksum_method_securekeyoperation_delete_key() != 49392.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
public interface AndroidApiService {
    
    fun `clipboardCopyString`(`clipData`: AppClipboardCopyData)
    
    fun `autofillClientAppUrlInfo`(): Map<kotlin.String, kotlin.String>
    
    fun `completeAutofill`(`autoFillData`: AutoFillDbData)
    
    companion object
}
open class AndroidApiServiceImpl: Disposable, AutoCloseable, AndroidApiService {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_androidapiservice(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_androidapiservice(pointer!!, status)
        }
    }

    
    @Throws(ApiCallbackException::class)override fun `clipboardCopyString`(`clipData`: AppClipboardCopyData)
        = 
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidapiservice_clipboard_copy_string(
        it, FfiConverterTypeAppClipboardCopyData.lower(`clipData`),_status)
}
    }
    
    

    
    @Throws(ApiCallbackException::class)override fun `autofillClientAppUrlInfo`(): Map<kotlin.String, kotlin.String> {
            return FfiConverterMapStringString.lift(
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidapiservice_autofill_client_app_url_info(
        it, _status)
}
    }
    )
    }
    

    
    @Throws(ApiCallbackException::class)override fun `completeAutofill`(`autoFillData`: AutoFillDbData)
        = 
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidapiservice_complete_autofill(
        it, FfiConverterTypeAutoFillDbData.lower(`autoFillData`),_status)
}
    }
    
    

    

    
    
    companion object
    
}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceAndroidApiService {
    internal object `clipboardCopyString`: UniffiCallbackInterfaceAndroidApiServiceMethod0 {
        override fun callback(`uniffiHandle`: Long,`clipData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAndroidApiService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`clipboardCopyString`(
                    FfiConverterTypeAppClipboardCopyData.lift(`clipData`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }
    internal object `autofillClientAppUrlInfo`: UniffiCallbackInterfaceAndroidApiServiceMethod1 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAndroidApiService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`autofillClientAppUrlInfo`(
                )
            }
            val writeReturn = { value: Map<kotlin.String, kotlin.String> -> uniffiOutReturn.setValue(FfiConverterMapStringString.lower(value)) }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }
    internal object `completeAutofill`: UniffiCallbackInterfaceAndroidApiServiceMethod2 {
        override fun callback(`uniffiHandle`: Long,`autoFillData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeAndroidApiService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`completeAutofill`(
                    FfiConverterTypeAutoFillDbData.lift(`autoFillData`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeAndroidApiService.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceAndroidApiService.UniffiByValue(
        `clipboardCopyString`,
        `autofillClientAppUrlInfo`,
        `completeAutofill`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_vtable_androidapiservice(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeAndroidApiService: FfiConverter<AndroidApiService, Pointer> {
    internal val handleMap = UniffiHandleMap<AndroidApiService>()

    override fun lower(value: AndroidApiService): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): AndroidApiService {
        return AndroidApiServiceImpl(value)
    }

    override fun read(buf: ByteBuffer): AndroidApiService {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AndroidApiService) = 8UL

    override fun write(value: AndroidApiService, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface AndroidSupportServiceExtraInterface {
    
    fun `completeSaveAsOnError`(`fileDescriptor`: kotlin.ULong, `oldFullFileNameUri`: kotlin.String, `newFullFileNameUri`: kotlin.String, `fileName`: kotlin.String): ApiResponse
    
    fun `createKdbx`(`fileDescriptor`: kotlin.ULong, `jsonArgs`: kotlin.String): ApiResponse
    
    fun `invoke`(`commandName`: kotlin.String, `jsonArgs`: kotlin.String): kotlin.String
    
    fun `saveKeyFile`(`fileDescriptor`: kotlin.ULong, `fullKeyFileName`: kotlin.String): kotlin.String
    
    companion object
}
open class AndroidSupportServiceExtra: Disposable, AutoCloseable, AndroidSupportServiceExtraInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_constructor_androidsupportserviceextra_new(
        _status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_androidsupportserviceextra(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_androidsupportserviceextra(pointer!!, status)
        }
    }

    override fun `completeSaveAsOnError`(`fileDescriptor`: kotlin.ULong, `oldFullFileNameUri`: kotlin.String, `newFullFileNameUri`: kotlin.String, `fileName`: kotlin.String): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportserviceextra_complete_save_as_on_error(
        it, FfiConverterULong.lower(`fileDescriptor`),FfiConverterString.lower(`oldFullFileNameUri`),FfiConverterString.lower(`newFullFileNameUri`),FfiConverterString.lower(`fileName`),_status)
}
    }
    )
    }
    

    override fun `createKdbx`(`fileDescriptor`: kotlin.ULong, `jsonArgs`: kotlin.String): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportserviceextra_create_kdbx(
        it, FfiConverterULong.lower(`fileDescriptor`),FfiConverterString.lower(`jsonArgs`),_status)
}
    }
    )
    }
    

    override fun `invoke`(`commandName`: kotlin.String, `jsonArgs`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportserviceextra_invoke(
        it, FfiConverterString.lower(`commandName`),FfiConverterString.lower(`jsonArgs`),_status)
}
    }
    )
    }
    

    override fun `saveKeyFile`(`fileDescriptor`: kotlin.ULong, `fullKeyFileName`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_androidsupportserviceextra_save_key_file(
        it, FfiConverterULong.lower(`fileDescriptor`),FfiConverterString.lower(`fullKeyFileName`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeAndroidSupportServiceExtra: FfiConverter<AndroidSupportServiceExtra, Pointer> {

    override fun lower(value: AndroidSupportServiceExtra): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): AndroidSupportServiceExtra {
        return AndroidSupportServiceExtra(value)
    }

    override fun read(buf: ByteBuffer): AndroidSupportServiceExtra {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AndroidSupportServiceExtra) = 8UL

    override fun write(value: AndroidSupportServiceExtra, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface CommonDeviceServiceEx {
    
    fun `clipboardCopyString`(`clipData`: AppClipboardCopyData)
    
    companion object
}
open class CommonDeviceServiceExImpl: Disposable, AutoCloseable, CommonDeviceServiceEx {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_commondeviceserviceex(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_commondeviceserviceex(pointer!!, status)
        }
    }

    
    @Throws(ApiCallbackException::class)override fun `clipboardCopyString`(`clipData`: AppClipboardCopyData)
        = 
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_commondeviceserviceex_clipboard_copy_string(
        it, FfiConverterTypeAppClipboardCopyData.lower(`clipData`),_status)
}
    }
    
    

    

    
    
    companion object
    
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceCommonDeviceServiceEx {
    internal object `clipboardCopyString`: UniffiCallbackInterfaceCommonDeviceServiceExMethod0 {
        override fun callback(`uniffiHandle`: Long,`clipData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceServiceEx.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`clipboardCopyString`(
                    FfiConverterTypeAppClipboardCopyData.lift(`clipData`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeCommonDeviceServiceEx.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceCommonDeviceServiceEx.UniffiByValue(
        `clipboardCopyString`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_vtable_commondeviceserviceex(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeCommonDeviceServiceEx: FfiConverter<CommonDeviceServiceEx, Pointer> {
    internal val handleMap = UniffiHandleMap<CommonDeviceServiceEx>()

    override fun lower(value: CommonDeviceServiceEx): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): CommonDeviceServiceEx {
        return CommonDeviceServiceExImpl(value)
    }

    override fun read(buf: ByteBuffer): CommonDeviceServiceEx {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: CommonDeviceServiceEx) = 8UL

    override fun write(value: CommonDeviceServiceEx, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface EventDispatch {
    
    fun `sendOtpUpdate`(`jsonString`: kotlin.String)
    
    fun `sendTickUpdate`(`jsonString`: kotlin.String)
    
    companion object
}
open class EventDispatchImpl: Disposable, AutoCloseable, EventDispatch {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_eventdispatch(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_eventdispatch(pointer!!, status)
        }
    }

    
    @Throws(ApiCallbackException::class)override fun `sendOtpUpdate`(`jsonString`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_eventdispatch_send_otp_update(
        it, FfiConverterString.lower(`jsonString`),_status)
}
    }
    
    

    
    @Throws(ApiCallbackException::class)override fun `sendTickUpdate`(`jsonString`: kotlin.String)
        = 
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_eventdispatch_send_tick_update(
        it, FfiConverterString.lower(`jsonString`),_status)
}
    }
    
    

    

    
    
    companion object
    
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceEventDispatch {
    internal object `sendOtpUpdate`: UniffiCallbackInterfaceEventDispatchMethod0 {
        override fun callback(`uniffiHandle`: Long,`jsonString`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEventDispatch.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`sendOtpUpdate`(
                    FfiConverterString.lift(`jsonString`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }
    internal object `sendTickUpdate`: UniffiCallbackInterfaceEventDispatchMethod1 {
        override fun callback(`uniffiHandle`: Long,`jsonString`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEventDispatch.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`sendTickUpdate`(
                    FfiConverterString.lift(`jsonString`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeEventDispatch.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceEventDispatch.UniffiByValue(
        `sendOtpUpdate`,
        `sendTickUpdate`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_vtable_eventdispatch(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeEventDispatch: FfiConverter<EventDispatch, Pointer> {
    internal val handleMap = UniffiHandleMap<EventDispatch>()

    override fun lower(value: EventDispatch): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): EventDispatch {
        return EventDispatchImpl(value)
    }

    override fun read(buf: ByteBuffer): EventDispatch {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EventDispatch) = 8UL

    override fun write(value: EventDispatch, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface JsonServiceInterface {
    
    fun `errorJsonString`(`error`: kotlin.String): kotlin.String
    
    fun `formWithFileName`(`fullFileNameUri`: kotlin.String): kotlin.String
    
    fun `mapAsOkJsonString`(`info`: Map<kotlin.String, kotlin.String>): kotlin.String
    
    fun `okJsonString`(`info`: kotlin.String): kotlin.String
    
    companion object
}
open class JsonService: Disposable, AutoCloseable, JsonServiceInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }
    constructor() :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_constructor_jsonservice_new(
        _status)
}
    )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_jsonservice(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_jsonservice(pointer!!, status)
        }
    }

    override fun `errorJsonString`(`error`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_error_json_string(
        it, FfiConverterString.lower(`error`),_status)
}
    }
    )
    }
    

    override fun `formWithFileName`(`fullFileNameUri`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_form_with_file_name(
        it, FfiConverterString.lower(`fullFileNameUri`),_status)
}
    }
    )
    }
    

    override fun `mapAsOkJsonString`(`info`: Map<kotlin.String, kotlin.String>): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_map_as_ok_json_string(
        it, FfiConverterMapStringString.lower(`info`),_status)
}
    }
    )
    }
    

    override fun `okJsonString`(`info`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_jsonservice_ok_json_string(
        it, FfiConverterString.lower(`info`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeJsonService: FfiConverter<JsonService, Pointer> {

    override fun lower(value: JsonService): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): JsonService {
        return JsonService(value)
    }

    override fun read(buf: ByteBuffer): JsonService {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: JsonService) = 8UL

    override fun write(value: JsonService, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface SecureEnclaveCbService {
    
    fun `encryptBytes`(`identifier`: kotlin.String, `plainData`: kotlin.ByteArray): kotlin.ByteArray
    
    fun `decryptBytes`(`identifier`: kotlin.String, `encryptedData`: kotlin.ByteArray): kotlin.ByteArray
    
    fun `removeKey`(`identifier`: kotlin.String): kotlin.Boolean
    
    companion object
}
open class SecureEnclaveCbServiceImpl: Disposable, AutoCloseable, SecureEnclaveCbService {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_free_secureenclavecbservice(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_clone_secureenclavecbservice(pointer!!, status)
        }
    }

    
    @Throws(ApiCallbackException::class)override fun `encryptBytes`(`identifier`: kotlin.String, `plainData`: kotlin.ByteArray): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_secureenclavecbservice_encrypt_bytes(
        it, FfiConverterString.lower(`identifier`),FfiConverterByteArray.lower(`plainData`),_status)
}
    }
    )
    }
    

    
    @Throws(ApiCallbackException::class)override fun `decryptBytes`(`identifier`: kotlin.String, `encryptedData`: kotlin.ByteArray): kotlin.ByteArray {
            return FfiConverterByteArray.lift(
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_secureenclavecbservice_decrypt_bytes(
        it, FfiConverterString.lower(`identifier`),FfiConverterByteArray.lower(`encryptedData`),_status)
}
    }
    )
    }
    

    
    @Throws(ApiCallbackException::class)override fun `removeKey`(`identifier`: kotlin.String): kotlin.Boolean {
            return FfiConverterBoolean.lift(
    callWithPointer {
    uniffiRustCallWithError(ApiCallbackException) { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_method_secureenclavecbservice_remove_key(
        it, FfiConverterString.lower(`identifier`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceSecureEnclaveCbService {
    internal object `encryptBytes`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod0 {
        override fun callback(`uniffiHandle`: Long,`identifier`: RustBuffer.ByValue,`plainData`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSecureEnclaveCbService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`encryptBytes`(
                    FfiConverterString.lift(`identifier`),
                    FfiConverterByteArray.lift(`plainData`),
                )
            }
            val writeReturn = { value: kotlin.ByteArray -> uniffiOutReturn.setValue(FfiConverterByteArray.lower(value)) }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }
    internal object `decryptBytes`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod1 {
        override fun callback(`uniffiHandle`: Long,`identifier`: RustBuffer.ByValue,`encryptedData`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSecureEnclaveCbService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`decryptBytes`(
                    FfiConverterString.lift(`identifier`),
                    FfiConverterByteArray.lift(`encryptedData`),
                )
            }
            val writeReturn = { value: kotlin.ByteArray -> uniffiOutReturn.setValue(FfiConverterByteArray.lower(value)) }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }
    internal object `removeKey`: UniffiCallbackInterfaceSecureEnclaveCbServiceMethod2 {
        override fun callback(`uniffiHandle`: Long,`identifier`: RustBuffer.ByValue,`uniffiOutReturn`: ByteByReference,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSecureEnclaveCbService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`removeKey`(
                    FfiConverterString.lift(`identifier`),
                )
            }
            val writeReturn = { value: kotlin.Boolean -> uniffiOutReturn.setValue(FfiConverterBoolean.lower(value)) }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: ApiCallbackException -> FfiConverterTypeApiCallbackError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeSecureEnclaveCbService.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceSecureEnclaveCbService.UniffiByValue(
        `encryptBytes`,
        `decryptBytes`,
        `removeKey`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_vtable_secureenclavecbservice(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeSecureEnclaveCbService: FfiConverter<SecureEnclaveCbService, Pointer> {
    internal val handleMap = UniffiHandleMap<SecureEnclaveCbService>()

    override fun lower(value: SecureEnclaveCbService): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): SecureEnclaveCbService {
        return SecureEnclaveCbServiceImpl(value)
    }

    override fun read(buf: ByteBuffer): SecureEnclaveCbService {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SecureEnclaveCbService) = 8UL

    override fun write(value: SecureEnclaveCbService, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class AppClipboardCopyData (
    var `fieldName`: kotlin.String, 
    var `fieldValue`: kotlin.String, 
    var `protected`: kotlin.Boolean, 
    var `cleanupAfter`: kotlin.UInt
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAppClipboardCopyData: FfiConverterRustBuffer<AppClipboardCopyData> {
    override fun read(buf: ByteBuffer): AppClipboardCopyData {
        return AppClipboardCopyData(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: AppClipboardCopyData) = (
            FfiConverterString.allocationSize(value.`fieldName`) +
            FfiConverterString.allocationSize(value.`fieldValue`) +
            FfiConverterBoolean.allocationSize(value.`protected`) +
            FfiConverterUInt.allocationSize(value.`cleanupAfter`)
    )

    override fun write(value: AppClipboardCopyData, buf: ByteBuffer) {
            FfiConverterString.write(value.`fieldName`, buf)
            FfiConverterString.write(value.`fieldValue`, buf)
            FfiConverterBoolean.write(value.`protected`, buf)
            FfiConverterUInt.write(value.`cleanupAfter`, buf)
    }
}



data class FileInfo (
    var `fileName`: kotlin.String?, 
    var `fileSize`: kotlin.Long?, 
    var `lastModified`: kotlin.Long?, 
    var `location`: kotlin.String?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFileInfo: FfiConverterRustBuffer<FileInfo> {
    override fun read(buf: ByteBuffer): FileInfo {
        return FileInfo(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: FileInfo) = (
            FfiConverterOptionalString.allocationSize(value.`fileName`) +
            FfiConverterOptionalLong.allocationSize(value.`fileSize`) +
            FfiConverterOptionalLong.allocationSize(value.`lastModified`) +
            FfiConverterOptionalString.allocationSize(value.`location`)
    )

    override fun write(value: FileInfo, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`fileName`, buf)
            FfiConverterOptionalLong.write(value.`fileSize`, buf)
            FfiConverterOptionalLong.write(value.`lastModified`, buf)
            FfiConverterOptionalString.write(value.`location`, buf)
    }
}



data class KdbxCreated (
    var `buffer`: List<kotlin.UByte>, 
    var `apiResponse`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeKdbxCreated: FfiConverterRustBuffer<KdbxCreated> {
    override fun read(buf: ByteBuffer): KdbxCreated {
        return KdbxCreated(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: KdbxCreated) = (
            FfiConverterSequenceUByte.allocationSize(value.`buffer`) +
            FfiConverterString.allocationSize(value.`apiResponse`)
    )

    override fun write(value: KdbxCreated, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`buffer`, buf)
            FfiConverterString.write(value.`apiResponse`, buf)
    }
}





sealed class ApiCallbackException: kotlin.Exception() {
    
    class InternalCallbackException(
        
        val `reason`: kotlin.String
        ) : ApiCallbackException() {
        override val message
            get() = "reason=${ `reason` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ApiCallbackException> {
        override fun lift(error_buf: RustBuffer.ByValue): ApiCallbackException = FfiConverterTypeApiCallbackError.lift(error_buf)
    }

    
}

/**
 * @suppress
 */
public object FfiConverterTypeApiCallbackError : FfiConverterRustBuffer<ApiCallbackException> {
    override fun read(buf: ByteBuffer): ApiCallbackException {
        

        return when(buf.getInt()) {
            1 -> ApiCallbackException.InternalCallbackException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ApiCallbackException): ULong {
        return when(value) {
            is ApiCallbackException.InternalCallbackException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
                + FfiConverterString.allocationSize(value.`reason`)
            )
        }
    }

    override fun write(value: ApiCallbackException, buf: ByteBuffer) {
        when(value) {
            is ApiCallbackException.InternalCallbackException -> {
                buf.putInt(1)
                FfiConverterString.write(value.`reason`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



sealed class ApiResponse {
    
    data class Success(
        val `result`: kotlin.String) : ApiResponse() {
        companion object
    }
    
    data class Failure(
        val `result`: kotlin.String) : ApiResponse() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeApiResponse : FfiConverterRustBuffer<ApiResponse>{
    override fun read(buf: ByteBuffer): ApiResponse {
        return when(buf.getInt()) {
            1 -> ApiResponse.Success(
                FfiConverterString.read(buf),
                )
            2 -> ApiResponse.Failure(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ApiResponse) = when(value) {
        is ApiResponse.Success -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`result`)
            )
        }
        is ApiResponse.Failure -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`result`)
            )
        }
    }

    override fun write(value: ApiResponse, buf: ByteBuffer) {
        when(value) {
            is ApiResponse.Success -> {
                buf.putInt(1)
                FfiConverterString.write(value.`result`, buf)
                Unit
            }
            is ApiResponse.Failure -> {
                buf.putInt(2)
                FfiConverterString.write(value.`result`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class AutoFillDbData {
    
    data class Login(
        val `username`: kotlin.String?, 
        val `password`: kotlin.String?) : AutoFillDbData() {
        companion object
    }
    
    object CreditCard : AutoFillDbData()
    
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAutoFillDbData : FfiConverterRustBuffer<AutoFillDbData>{
    override fun read(buf: ByteBuffer): AutoFillDbData {
        return when(buf.getInt()) {
            1 -> AutoFillDbData.Login(
                FfiConverterOptionalString.read(buf),
                FfiConverterOptionalString.read(buf),
                )
            2 -> AutoFillDbData.CreditCard
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: AutoFillDbData) = when(value) {
        is AutoFillDbData.Login -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterOptionalString.allocationSize(value.`username`)
                + FfiConverterOptionalString.allocationSize(value.`password`)
            )
        }
        is AutoFillDbData.CreditCard -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: AutoFillDbData, buf: ByteBuffer) {
        when(value) {
            is AutoFillDbData.Login -> {
                buf.putInt(1)
                FfiConverterOptionalString.write(value.`username`, buf)
                FfiConverterOptionalString.write(value.`password`, buf)
                Unit
            }
            is AutoFillDbData.CreditCard -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class FileArgs {
    
    data class FileDecriptor(
        val `fd`: kotlin.ULong) : FileArgs() {
        companion object
    }
    
    data class FileDecriptorWithFullFileName(
        val `fd`: kotlin.ULong, 
        val `fullFileName`: kotlin.String, 
        val `fileName`: kotlin.String) : FileArgs() {
        companion object
    }
    
    data class FullFileName(
        val `fullFileName`: kotlin.String) : FileArgs() {
        companion object
    }
    
    data class FileNameWithDir(
        val `dirPath`: kotlin.String, 
        val `fileName`: kotlin.String) : FileArgs() {
        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFileArgs : FfiConverterRustBuffer<FileArgs>{
    override fun read(buf: ByteBuffer): FileArgs {
        return when(buf.getInt()) {
            1 -> FileArgs.FileDecriptor(
                FfiConverterULong.read(buf),
                )
            2 -> FileArgs.FileDecriptorWithFullFileName(
                FfiConverterULong.read(buf),
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            3 -> FileArgs.FullFileName(
                FfiConverterString.read(buf),
                )
            4 -> FileArgs.FileNameWithDir(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: FileArgs) = when(value) {
        is FileArgs.FileDecriptor -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`fd`)
            )
        }
        is FileArgs.FileDecriptorWithFullFileName -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`fd`)
                + FfiConverterString.allocationSize(value.`fullFileName`)
                + FfiConverterString.allocationSize(value.`fileName`)
            )
        }
        is FileArgs.FullFileName -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`fullFileName`)
            )
        }
        is FileArgs.FileNameWithDir -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`dirPath`)
                + FfiConverterString.allocationSize(value.`fileName`)
            )
        }
    }

    override fun write(value: FileArgs, buf: ByteBuffer) {
        when(value) {
            is FileArgs.FileDecriptor -> {
                buf.putInt(1)
                FfiConverterULong.write(value.`fd`, buf)
                Unit
            }
            is FileArgs.FileDecriptorWithFullFileName -> {
                buf.putInt(2)
                FfiConverterULong.write(value.`fd`, buf)
                FfiConverterString.write(value.`fullFileName`, buf)
                FfiConverterString.write(value.`fileName`, buf)
                Unit
            }
            is FileArgs.FullFileName -> {
                buf.putInt(3)
                FfiConverterString.write(value.`fullFileName`, buf)
                Unit
            }
            is FileArgs.FileNameWithDir -> {
                buf.putInt(4)
                FfiConverterString.write(value.`dirPath`, buf)
                FfiConverterString.write(value.`fileName`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







sealed class SecureKeyOperationException(message: String): kotlin.Exception(message) {
        
        class StoringKeyException(message: String) : SecureKeyOperationException(message)
        
        class StoringKeyDuplicateItemException(message: String) : SecureKeyOperationException(message)
        
        class QueryKeyException(message: String) : SecureKeyOperationException(message)
        
        class DeleteKeyException(message: String) : SecureKeyOperationException(message)
        
        class InternalSecureKeyOperationException(message: String) : SecureKeyOperationException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SecureKeyOperationException> {
        override fun lift(error_buf: RustBuffer.ByValue): SecureKeyOperationException = FfiConverterTypeSecureKeyOperationError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeSecureKeyOperationError : FfiConverterRustBuffer<SecureKeyOperationException> {
    override fun read(buf: ByteBuffer): SecureKeyOperationException {
        
            return when(buf.getInt()) {
            1 -> SecureKeyOperationException.StoringKeyException(FfiConverterString.read(buf))
            2 -> SecureKeyOperationException.StoringKeyDuplicateItemException(FfiConverterString.read(buf))
            3 -> SecureKeyOperationException.QueryKeyException(FfiConverterString.read(buf))
            4 -> SecureKeyOperationException.DeleteKeyException(FfiConverterString.read(buf))
            5 -> SecureKeyOperationException.InternalSecureKeyOperationException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: SecureKeyOperationException): ULong {
        return 4UL
    }

    override fun write(value: SecureKeyOperationException, buf: ByteBuffer) {
        when(value) {
            is SecureKeyOperationException.StoringKeyException -> {
                buf.putInt(1)
                Unit
            }
            is SecureKeyOperationException.StoringKeyDuplicateItemException -> {
                buf.putInt(2)
                Unit
            }
            is SecureKeyOperationException.QueryKeyException -> {
                buf.putInt(3)
                Unit
            }
            is SecureKeyOperationException.DeleteKeyException -> {
                buf.putInt(4)
                Unit
            }
            is SecureKeyOperationException.InternalSecureKeyOperationException -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





public interface CommonDeviceService {
    
    fun `appHomeDir`(): kotlin.String
    
    fun `appGroupHomeDir`(): kotlin.String?
    
    fun `cacheDir`(): kotlin.String
    
    fun `tempDir`(): kotlin.String
    
    fun `loadLanguageTranslation`(`languageId`: kotlin.String): kotlin.String?
    
    fun `uriToFileName`(`fullFileNameUri`: kotlin.String): kotlin.String?
    
    fun `uriToFileInfo`(`fullFileNameUri`: kotlin.String): FileInfo?
    
    companion object
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceCommonDeviceService {
    internal object `appHomeDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod0 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`appHomeDir`(
                )
            }
            val writeReturn = { value: kotlin.String -> uniffiOutReturn.setValue(FfiConverterString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `appGroupHomeDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod1 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`appGroupHomeDir`(
                )
            }
            val writeReturn = { value: kotlin.String? -> uniffiOutReturn.setValue(FfiConverterOptionalString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `cacheDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod2 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`cacheDir`(
                )
            }
            val writeReturn = { value: kotlin.String -> uniffiOutReturn.setValue(FfiConverterString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `tempDir`: UniffiCallbackInterfaceCommonDeviceServiceMethod3 {
        override fun callback(`uniffiHandle`: Long,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`tempDir`(
                )
            }
            val writeReturn = { value: kotlin.String -> uniffiOutReturn.setValue(FfiConverterString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `loadLanguageTranslation`: UniffiCallbackInterfaceCommonDeviceServiceMethod4 {
        override fun callback(`uniffiHandle`: Long,`languageId`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`loadLanguageTranslation`(
                    FfiConverterString.lift(`languageId`),
                )
            }
            val writeReturn = { value: kotlin.String? -> uniffiOutReturn.setValue(FfiConverterOptionalString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `uriToFileName`: UniffiCallbackInterfaceCommonDeviceServiceMethod5 {
        override fun callback(`uniffiHandle`: Long,`fullFileNameUri`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`uriToFileName`(
                    FfiConverterString.lift(`fullFileNameUri`),
                )
            }
            val writeReturn = { value: kotlin.String? -> uniffiOutReturn.setValue(FfiConverterOptionalString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `uriToFileInfo`: UniffiCallbackInterfaceCommonDeviceServiceMethod6 {
        override fun callback(`uniffiHandle`: Long,`fullFileNameUri`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeCommonDeviceService.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`uriToFileInfo`(
                    FfiConverterString.lift(`fullFileNameUri`),
                )
            }
            val writeReturn = { value: FileInfo? -> uniffiOutReturn.setValue(FfiConverterOptionalTypeFileInfo.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeCommonDeviceService.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceCommonDeviceService.UniffiByValue(
        `appHomeDir`,
        `appGroupHomeDir`,
        `cacheDir`,
        `tempDir`,
        `loadLanguageTranslation`,
        `uriToFileName`,
        `uriToFileInfo`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_vtable_commondeviceservice(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeCommonDeviceService: FfiConverterCallbackInterface<CommonDeviceService>()





public interface SecureKeyOperation {
    
    fun `storeKey`(`dbKey`: kotlin.String, `encKeyData`: kotlin.String)
    
    fun `getKey`(`dbKey`: kotlin.String): kotlin.String?
    
    fun `deleteKey`(`dbKey`: kotlin.String)
    
    companion object
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceSecureKeyOperation {
    internal object `storeKey`: UniffiCallbackInterfaceSecureKeyOperationMethod0 {
        override fun callback(`uniffiHandle`: Long,`dbKey`: RustBuffer.ByValue,`encKeyData`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSecureKeyOperation.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`storeKey`(
                    FfiConverterString.lift(`dbKey`),
                    FfiConverterString.lift(`encKeyData`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: SecureKeyOperationException -> FfiConverterTypeSecureKeyOperationError.lower(e) }
            )
        }
    }
    internal object `getKey`: UniffiCallbackInterfaceSecureKeyOperationMethod1 {
        override fun callback(`uniffiHandle`: Long,`dbKey`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSecureKeyOperation.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`getKey`(
                    FfiConverterString.lift(`dbKey`),
                )
            }
            val writeReturn = { value: kotlin.String? -> uniffiOutReturn.setValue(FfiConverterOptionalString.lower(value)) }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: SecureKeyOperationException -> FfiConverterTypeSecureKeyOperationError.lower(e) }
            )
        }
    }
    internal object `deleteKey`: UniffiCallbackInterfaceSecureKeyOperationMethod2 {
        override fun callback(`uniffiHandle`: Long,`dbKey`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeSecureKeyOperation.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`deleteKey`(
                    FfiConverterString.lift(`dbKey`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: SecureKeyOperationException -> FfiConverterTypeSecureKeyOperationError.lower(e) }
            )
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeSecureKeyOperation.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceSecureKeyOperation.UniffiByValue(
        `storeKey`,
        `getKey`,
        `deleteKey`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_db_service_ffi_fn_init_callback_vtable_securekeyoperation(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeSecureKeyOperation: FfiConverterCallbackInterface<SecureKeyOperation>()




/**
 * @suppress
 */
public object FfiConverterOptionalLong: FfiConverterRustBuffer<kotlin.Long?> {
    override fun read(buf: ByteBuffer): kotlin.Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: kotlin.Long?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeFileInfo: FfiConverterRustBuffer<FileInfo?> {
    override fun read(buf: ByteBuffer): FileInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFileInfo.read(buf)
    }

    override fun allocationSize(value: FileInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFileInfo.allocationSize(value)
        }
    }

    override fun write(value: FileInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFileInfo.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<kotlin.UByte>> {
    override fun read(buf: ByteBuffer): List<kotlin.UByte> {
        val len = buf.getInt()
        return List<kotlin.UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.UByte>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterMapStringString: FfiConverterRustBuffer<Map<kotlin.String, kotlin.String>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.String> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.String>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterString.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.String>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
            FfiConverterString.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterString.write(v, buf)
        }
    }
} fun `copyPickedKeyFile`(`fileArgs`: FileArgs): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_copy_picked_key_file(
        FfiConverterTypeFileArgs.lower(`fileArgs`),_status)
}
    )
    }
    
 fun `createTempKdbx`(`fileArgs`: FileArgs, `jsonArgs`: kotlin.String): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_create_temp_kdbx(
        FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
}
    )
    }
    
 fun `dbServiceEnableLogging`()
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_db_service_enable_logging(
        _status)
}
    
    
 fun `extractFileProvider`(`fullFileNameUri`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_extract_file_provider(
        FfiConverterString.lower(`fullFileNameUri`),_status)
}
    )
    }
    
 fun `invokeCommand`(`commandName`: kotlin.String, `args`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_invoke_command(
        FfiConverterString.lower(`commandName`),FfiConverterString.lower(`args`),_status)
}
    )
    }
    
 fun `readKdbx`(`fileArgs`: FileArgs, `jsonArgs`: kotlin.String): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_read_kdbx(
        FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
}
    )
    }
    
 fun `saveKdbx`(`fileArgs`: FileArgs, `overwrite`: kotlin.Boolean): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_save_kdbx(
        FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterBoolean.lower(`overwrite`),_status)
}
    )
    }
    
 fun `uploadAttachment`(`fileArgs`: FileArgs, `jsonArgs`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_upload_attachment(
        FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
}
    )
    }
    
 fun `verifyDbFileChecksum`(`fileArgs`: FileArgs): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_verify_db_file_checksum(
        FfiConverterTypeFileArgs.lower(`fileArgs`),_status)
}
    )
    }
    
 fun `writeToBackupOnError`(`fullFileNameUri`: kotlin.String): ApiResponse {
            return FfiConverterTypeApiResponse.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_write_to_backup_on_error(
        FfiConverterString.lower(`fullFileNameUri`),_status)
}
    )
    }
    
 fun `androidCallbackServiceInitialize`(`androidApiService`: AndroidApiService)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_android_callback_service_initialize(
        FfiConverterTypeAndroidApiService.lower(`androidApiService`),_status)
}
    
    
 fun `dbServiceInitialize`(`commonDeviceService`: CommonDeviceService, `secureKeyOperation`: SecureKeyOperation, `eventDispatcher`: EventDispatch, `commonDeviceServiceEx`: CommonDeviceServiceEx, `secureEnclaveCbService`: SecureEnclaveCbService)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_db_service_initialize(
        FfiConverterTypeCommonDeviceService.lower(`commonDeviceService`),FfiConverterTypeSecureKeyOperation.lower(`secureKeyOperation`),FfiConverterTypeEventDispatch.lower(`eventDispatcher`),FfiConverterTypeCommonDeviceServiceEx.lower(`commonDeviceServiceEx`),FfiConverterTypeSecureEnclaveCbService.lower(`secureEnclaveCbService`),_status)
}
    
    
 fun `handlePickedFile`(`fileArgs`: FileArgs, `jsonArgs`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_db_service_ffi_fn_func_handle_picked_file(
        FfiConverterTypeFileArgs.lower(`fileArgs`),FfiConverterString.lower(`jsonArgs`),_status)
}
    )
    }
    


